

TOKEN: SEPARATOR    LEXEME: $
<Rat24S> -> $ <Opt Function Definitions>
<Opt Function Definitions> -> <Function Definitions> | <Empty>
<Function Definitions> -> <Function><Function Definitions Prime>


TOKEN: KEYWORD      LEXEME: function


TOKEN: IDENTIFIER   LEXEME: calcArea
<Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>


TOKEN: SEPARATOR    LEXEME: (
<Opt Parameter List -> <Parameter List>
<Parameter List> -> <Parameter><Parameter List Prime>
<Parameter> -> <IDs> <Qualifier>


TOKEN: IDENTIFIER   LEXEME: length
<IDs> -> <Identifier><IDs Prime>
<IDs Prime> -> e


TOKEN: KEYWORD      LEXEME: integer
<Qualifier> -> integer


TOKEN: SEPARATOR    LEXEME: ,
<Parameter List> -> <Parameter><Parameter List Prime>
<Parameter> -> <IDs> <Qualifier>


TOKEN: IDENTIFIER   LEXEME: width
<IDs> -> <Identifier><IDs Prime>
<IDs Prime> -> e


TOKEN: KEYWORD      LEXEME: integer
<Qualifier> -> integer
<Parameter List Prime> -> e


TOKEN: SEPARATOR    LEXEME: )
<Empty> -> e


TOKEN: SEPARATOR    LEXEME: {
<Body> -> { <Statement List> }
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Assign>


TOKEN: IDENTIFIER   LEXEME: area
Assign -> <Identifier> = <Expression> ;


TOKEN: OPERATOR     LEXEME: =


TOKEN: IDENTIFIER   LEXEME: length
<Expression> -> <Term><ExpressionPrime>
<Term> -> <Factor><TermPrime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary Prime>
<Primary Prime> -> e


TOKEN: OPERATOR     LEXEME: +
<Term Prime> -> e
<Expression Prime> -> + <Term><ExpressionPrime>


TOKEN: IDENTIFIER   LEXEME: width
<Term> -> <Factor><TermPrime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary Prime>
<Primary Prime> -> e


TOKEN: SEPARATOR    LEXEME: ;
<Term Prime> -> e
<Expression Prime> -> e
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Return>


TOKEN: KEYWORD      LEXEME: return
<Return> -> return <Return Prime>


TOKEN: IDENTIFIER   LEXEME: area
<Expression> -> <Term><ExpressionPrime>
<Term> -> <Factor><TermPrime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary Prime>
<Primary Prime> -> e


TOKEN: SEPARATOR    LEXEME: ;
<Term Prime> -> e
<Expression Prime> -> e
<Statement List Prime> -> e


TOKEN: SEPARATOR    LEXEME: }


TOKEN: SEPARATOR    LEXEME: $
<Rat24S> -> $ <Opt Declaration List>
<Declaration List> -> <Declaration> ;<Declaration List Prime>
<Declaration> -> <Qualifier> <IDs>


TOKEN: KEYWORD      LEXEME: integer
<Qualifier> -> integer


TOKEN: IDENTIFIER   LEXEME: area1
<IDs> -> <Identifier><IDs Prime>


TOKEN: SEPARATOR    LEXEME: ,
<IDs Prime> -> , <IDs Prime>


TOKEN: IDENTIFIER   LEXEME: area2
<IDs> -> <Identifier><IDs Prime>
<IDs Prime> -> e


TOKEN: SEPARATOR    LEXEME: ;
<Declaration List Prime> -> e


TOKEN: SEPARATOR    LEXEME: $
<Rat24S -> $ <Statement List>
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Assign>


TOKEN: IDENTIFIER   LEXEME: area1
Assign -> <Identifier> = <Expression> ;


TOKEN: OPERATOR     LEXEME: =


TOKEN: INTEGER      LEXEME: 1
<Expression> -> <Term><ExpressionPrime>
<Term> -> <Factor><TermPrime>
<Factor> -> <Primary>
<Primary> -> <Integer>


TOKEN: SEPARATOR    LEXEME: ;
<Term Prime> -> e
<Expression Prime> -> e
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Assign>


TOKEN: IDENTIFIER   LEXEME: area2
Assign -> <Identifier> = <Expression> ;


TOKEN: OPERATOR     LEXEME: =


TOKEN: INTEGER      LEXEME: 100
<Expression> -> <Term><ExpressionPrime>
<Term> -> <Factor><TermPrime>
<Factor> -> <Primary>
<Primary> -> <Integer>


TOKEN: SEPARATOR    LEXEME: ;
<Term Prime> -> e
<Expression Prime> -> e
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Scan>


TOKEN: KEYWORD      LEXEME: scan


TOKEN: SEPARATOR    LEXEME: (
<Scan> -> scan ( <IDs> );


TOKEN: IDENTIFIER   LEXEME: area1
<IDs> -> <Identifier><IDs Prime>


TOKEN: SEPARATOR    LEXEME: ,
<IDs Prime> -> , <IDs Prime>


TOKEN: IDENTIFIER   LEXEME: area2
<IDs> -> <Identifier><IDs Prime>
<IDs Prime> -> e


TOKEN: SEPARATOR    LEXEME: )


TOKEN: SEPARATOR    LEXEME: ;
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <While>


TOKEN: KEYWORD      LEXEME: while


TOKEN: SEPARATOR    LEXEME: (
<While> -> while ( <Condition>
<Condition> -> <Expression> <Relop> <Expression>


TOKEN: IDENTIFIER   LEXEME: area2
<Expression> -> <Term><ExpressionPrime>
<Term> -> <Factor><TermPrime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary Prime>
<Primary Prime> -> e


TOKEN: OPERATOR     LEXEME: >
<Term Prime> -> e
<Expression Prime> -> e
<Relop> -> >


TOKEN: IDENTIFIER   LEXEME: area1
<Expression> -> <Term><ExpressionPrime>
<Term> -> <Factor><TermPrime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary Prime>
<Primary Prime> -> e


TOKEN: SEPARATOR    LEXEME: )
<Term Prime> -> e
<Expression Prime> -> e
<Statement> -> <Compound>


TOKEN: SEPARATOR    LEXEME: {
<Compound> -> { <Statement List> }
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Assign>


TOKEN: IDENTIFIER   LEXEME: length
Assign -> <Identifier> = <Expression> ;


TOKEN: OPERATOR     LEXEME: =


TOKEN: IDENTIFIER   LEXEME: length
<Expression> -> <Term><ExpressionPrime>
<Term> -> <Factor><TermPrime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary Prime>
<Primary Prime> -> e


TOKEN: OPERATOR     LEXEME: +
<Term Prime> -> e
<Expression Prime> -> + <Term><ExpressionPrime>


TOKEN: INTEGER      LEXEME: 2
<Term> -> <Factor><TermPrime>
<Factor> -> <Primary>
<Primary> -> <Integer>


TOKEN: SEPARATOR    LEXEME: ;
<Term Prime> -> e
<Expression Prime> -> e
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Assign>


TOKEN: IDENTIFIER   LEXEME: width
Assign -> <Identifier> = <Expression> ;


TOKEN: OPERATOR     LEXEME: =


TOKEN: IDENTIFIER   LEXEME: width
<Expression> -> <Term><ExpressionPrime>
<Term> -> <Factor><TermPrime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary Prime>
<Primary Prime> -> e


TOKEN: OPERATOR     LEXEME: +
<Term Prime> -> e
<Expression Prime> -> + <Term><ExpressionPrime>


TOKEN: INTEGER      LEXEME: 2
<Term> -> <Factor><TermPrime>
<Factor> -> <Primary>
<Primary> -> <Integer>


TOKEN: SEPARATOR    LEXEME: ;
<Term Prime> -> e
<Expression Prime> -> e
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Assign>


TOKEN: IDENTIFIER   LEXEME: area1
Assign -> <Identifier> = <Expression> ;


TOKEN: OPERATOR     LEXEME: =


TOKEN: IDENTIFIER   LEXEME: calcArea
<Expression> -> <Term><ExpressionPrime>
<Term> -> <Factor><TermPrime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary Prime>


TOKEN: SEPARATOR    LEXEME: (
<Primary Prime> -> ( <IDs> )


TOKEN: IDENTIFIER   LEXEME: legnth
<IDs> -> <Identifier><IDs Prime>


TOKEN: SEPARATOR    LEXEME: ,
<IDs Prime> -> , <IDs Prime>


TOKEN: IDENTIFIER   LEXEME: width
<IDs> -> <Identifier><IDs Prime>
<IDs Prime> -> e


TOKEN: SEPARATOR    LEXEME: )


TOKEN: SEPARATOR    LEXEME: ;
<Term Prime> -> e
<Expression Prime> -> e
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Print>


TOKEN: KEYWORD      LEXEME: print


TOKEN: SEPARATOR    LEXEME: (
<Print> -> print ( <Expression>);


TOKEN: IDENTIFIER   LEXEME: area1
<Expression> -> <Term><ExpressionPrime>
<Term> -> <Factor><TermPrime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary Prime>
<Primary Prime> -> e


TOKEN: SEPARATOR    LEXEME: )
<Term Prime> -> e
<Expression Prime> -> e


TOKEN: SEPARATOR    LEXEME: ;
<Statement List Prime> -> e


TOKEN: SEPARATOR    LEXEME: }


TOKEN: KEYWORD      LEXEME: endwhile
<Statement List Prime> -> e
<Rat24S> -> $
